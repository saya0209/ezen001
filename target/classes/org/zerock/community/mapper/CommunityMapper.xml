<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE 
	mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper 
	namespace="org.zerock.community.mapper.CommunityMapper">

	<!-- 커뮤니티 게시판 리스트 쿼리 -->
	<select id="list" resultType="org.zerock.community.vo.CommunityVO">
	    select community_no, id, nicname, title, content, writeDate, hit, 
	    	updateDate, likeCnt, dislikeCnt, image
	    from (
	        select rownum rnum, community_no, id, nicname, title, content, writeDate, hit, 
	        	updateDate, likeCnt, dislikeCnt, image
	        from (
	            select c.community_no, c.id, m.nicname, c.title, c.content, c.writeDate, c.hit, 
	            c.updateDate, c.likeCnt, c.dislikeCnt, c.image
	            from community c, member m
	            where 
	                c.id = m.id <!-- 조인조건 -->
	                <!-- 검색을 달아야 한다. -->
	                <include refid="search"></include>
	            order by c.community_no desc
	        )
	    )
	    where rnum between #{startRow} and #{endRow}
	</select>


	<!-- 커뮤니티 게시판 리스트 페이지 처리를 위한 전체 데이터 개수를 가져오는 쿼리 -->
	<select id="getTotalRow" resultType="Long">
		select count(*)
		from community c
		<include refid="search" />
		<!-- <include refid="search"></include> -->
	</select>

	<!-- 커뮤니티 게시판 리스트 검색 처리 -->
	<sql id="search">
		<if test="word != null and word != ''.toString()">
			<trim prefix="where" prefixOverrides="or">
				<if test="key.indexOf('t') >= 0">
					or title like '%' || #{word} || '%'
				</if>
				<if test="key.indexOf('c') >= 0">
					or content like '%' || #{word} || '%'
				</if>
				<if test="key.indexOf('w') >= 0">
					or id like '%' || #{word} || '%'
				</if>
			</trim>
		</if>
	</sql>

	<!-- 커뮤니티 게시판 글보기 -->
	<!-- 조회수 증가 쿼리 -->
	<update id="increase">
		update community set hit = hit + 1
		where community_no = #{community_no}
	</update>

	<!-- 글보기 (글 정보 가져오기) 쿼리 -->
	<select id="view" resultType="org.zerock.community.vo.CommunityVO">
	    select c.community_no, c.id, m.nicname, c.title, c.content, c.writeDate, c.hit, 
	    	c.updateDate, c.likeCnt, c.dislikeCnt, c.image
	    from community c
	    JOIN member m ON c.id = m.id  <!-- member 테이블과 조인하여 nicname 가져오기 -->
	    where c.community_no = #{community_no}
	</select>

	<!-- 커뮤니티 게시판 글쓰기 쿼리 -->
	<insert id="write">
    <selectKey keyProperty="community_no" resultType="Long" order="BEFORE">
        select community_seq.nextval from dual
    </selectKey>
    insert into community(
        community_no, id, title, content, image, writeDate, hit, likeCnt, dislikeCnt)
    values(
        #{community_no}, 
        #{id,jdbcType=VARCHAR}, 
        #{title}, 
        #{content}, 
        <if test="image != null">#{image, jdbcType=VARCHAR}</if>
        <if test="image == null">NULL</if>,
        sysdate,  
        #{hit}, 
        #{likeCnt}, 
        #{dislikeCnt}
    )
</insert>

<update id="update">
	update community set
	id = #{id,jdbcType=VARCHAR}, 
	title = #{title},
	content = #{content},
	image =
	<if test="image != null">
		#{image, jdbcType=VARCHAR}
	</if>
	<if test="image == null">
		NULL
	</if>
	where community_no = #{community_no} and id = #{id}
</update>
	
<!-- 댓글 삭제 쿼리 -->
<delete id="delete">
    delete from community
    where community_no = #{community_no}
</delete>

<!-- 특정 게시글의 모든 좋아요/싫어요 반응 삭제 -->
<delete id="deleteReactions">
    DELETE FROM community_reaction 
    WHERE community_no = #{community_no}
</delete>
	
	
	
<!-- //////////////////////////////////////////////////////// -->

	<select id="checkUserReaction" resultType="string">
	    SELECT reaction_type 
	    FROM community_reaction 
	    WHERE community_no = #{community_no} AND id = #{id}
	</select>
	
	<!-- 좋아요/싫어요 등록 -->
	<insert id="insertReaction">
	    INSERT INTO community_reaction (community_no, id, reaction_type)
	    VALUES (#{community_no}, #{id}, #{reactionType})
	</insert>
	
	<!-- 좋아요/싫어요 취소 -->
	<delete id="deleteReaction">
	    DELETE FROM community_reaction 
	    WHERE community_no = #{community_no} AND id = #{id}
	</delete>
	
	<!-- 좋아요 업데이트 (기존 쿼리 수정) -->
	<update id="updateLike">
	    UPDATE community 
	    SET likeCnt = (
	        SELECT COUNT(*) 
	        FROM community_reaction 
	        WHERE community_no = #{community_no} AND reaction_type = 'like'
	    )
	    WHERE community_no = #{community_no}
	</update>
	
	<!-- 싫어요 업데이트 (기존 쿼리 수정) -->
	<update id="updateDislike">
	    UPDATE community 
	    SET dislikeCnt = (
	        SELECT COUNT(*) 
	        FROM community_reaction 
	        WHERE community_no = #{community_no} AND reaction_type = 'dislike'
	    )
	    WHERE community_no = #{community_no}
	</update>


</mapper>
