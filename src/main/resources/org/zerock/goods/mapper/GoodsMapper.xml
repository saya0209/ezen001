<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.goods.mapper.GoodsMapper">

	<!-- 상품 체크 (기존 상품이 있는지 확인) -->
    <select id="GoodsCheck" parameterType="map" resultType="org.zerock.goods.vo.GoodsVO">
        select g.goods_no,
               g.cpu_id,
               g.memory_id,
               g.graphic_card_id,
               g.total_price,
               c.cpu_name,           <!-- CPU 이름 -->
               m.memory_name,     <!-- 메모리 이름 -->
               gc.graphic_card_name <!-- 그래픽 카드 이름 -->
        from goods g
        join cpu c ON g.cpu_id = c.cpu_id
        join memory m ON g.memory_id = m.memory_id
        join graphic_card GC ON g.graphic_card_id = gc.graphic_card_id
        where g.cpu_id = #{cpu_id}
          and g.memory_id = #{memory_id}
          and g.graphic_card_id = #{graphic_Card_id}
    </select>

    <!-- 상품 등록 -->
    <insert id="insertGoods" parameterType="org.zerock.goods.vo.GoodsVO">
        insert into goods (goods_no, cpu_id, memory_id, graphic_Card_id, cpu_name, memory_name, graphic_Card_name, total_price, category, delivery_charge, discount, image_name)
        values (goods_seq.NEXTVAL, #{cpu_id,jdbcType=BIGINT}, #{memory_id,jdbcType=BIGINT}, #{graphic_Card_id,jdbcType=BIGINT},
        (SELECT cpu_name FROM cpu WHERE cpu_id = #{cpu_id,jdbcType=BIGINT}),
        (SELECT memory_name FROM memory WHERE memory_id = #{memory_id,jdbcType=BIGINT}), 
        (SELECT graphic_Card_name FROM graphic_Card WHERE graphic_Card_id = #{graphic_Card_id,jdbcType=BIGINT}),
        (
            select cpu_price from cpu where cpu_id = #{cpu_id,jdbcType=BIGINT}
        ) + (
            select memory_price from memory where memory_id = #{memory_id,jdbcType=BIGINT}
        ) + (
            select graphic_Card_price from graphic_Card where graphic_Card_id = #{graphic_Card_id,jdbcType=BIGINT}
        ), #{category}, #{delivery_charge}, #{discount},
        #{image_name}
        )
    </insert>
    
    <insert id="insertGoods1" parameterType="org.zerock.goods.vo.GoodsVO">
	    insert into goods (goods_no, cpu_id, category, total_price, delivery_charge, discount, image_name)
	    values (goods_seq.NEXTVAL, #{cpu_id}, #{category},
	    (
	        select cpu_price from cpu where cpu_id = #{cpu_id,jdbcType=BIGINT}
	    ),
	    #{delivery_charge}, #{discount}, #{image_name})
	</insert>



    <!-- 상품 리스트 조회 (페이징 처리 포함) -->
    <select id="getGoodsList" resultType="org.zerock.goods.vo.GoodsVO">
	    SELECT g.goods_no,
	           g.cpu_id,
	           g.memory_id,
	           g.graphic_card_id,
	           g.delivery_charge,
	           g.discount,
	           g.total_price,
	           g.category,
	           g.hit,
	           c.cpu_name,           <!-- CPU 이름 -->
	           m.memory_name,        <!-- 메모리 이름 -->
	           gc.graphic_card_name, <!-- 그래픽 카드 이름 -->
	           g.image_name
	    FROM goods g
	    JOIN cpu c ON g.cpu_id = c.cpu_id
	    JOIN memory m ON g.memory_id = m.memory_id
	    JOIN graphic_card gc ON g.graphic_card_id = gc.graphic_card_id
	    <where>
	        <!-- 페이징 처리: 시작 행과 끝 행 계산 -->
	        <if test="pageObject.startRow != null and pageObject.endRow != null">
	            AND ROWNUM BETWEEN #{pageObject.startRow} AND #{pageObject.endRow}
	        </if>
	    </where>

	</select>
	
	<select id="getGoodsByCategory" resultType="org.zerock.goods.vo.GoodsVO">
        SELECT goods_no, category, cpu_name, memory_name, graphic_Card_name, image_name, total_price, discount, delivery_charge
        FROM goods
        WHERE category = #{category}
    </select>
  	

	<!-- 조회수순으로 정렬 -->
    <select id="getGoodsListSortedByHit" resultType="org.zerock.goods.vo.GoodsVO">
        SELECT g.goods_no,
               g.cpu_id,
               g.memory_id,
               g.graphic_card_id,
               g.delivery_charge,
	           g.discount,
               g.total_price,
               g.category,
               g.hit,
               c.cpu_name,
               m.memory_name,
               gc.graphic_card_name,
               g.image_name
        FROM goods g
        JOIN cpu c ON g.cpu_id = c.cpu_id
        JOIN memory m ON g.memory_id = m.memory_id
        JOIN graphic_card gc ON g.graphic_card_id = gc.graphic_card_id
        <where>
            <if test="category != null and category != ''">
                AND g.category = #{category}
            </if>
            <if test="pageObject.startRow != null and pageObject.endRow != null">
                AND ROWNUM BETWEEN #{pageObject.startRow} AND #{pageObject.endRow}
            </if>
        </where>
        ORDER BY g.hit DESC
    </select>
    

    <!-- 최저가순으로 정렬 -->
    <select id="getGoodsListSortedByPriceAsc" resultType="org.zerock.goods.vo.GoodsVO">
        SELECT g.goods_no,
               g.cpu_id,
               g.memory_id,
               g.graphic_card_id,
               g.delivery_charge,
	           g.discount,
               g.total_price,
               g.category,
               g.hit,
               c.cpu_name,
               m.memory_name,
               gc.graphic_card_name,
               g.image_name
        FROM goods g
        JOIN cpu c ON g.cpu_id = c.cpu_id
        JOIN memory m ON g.memory_id = m.memory_id
        JOIN graphic_card gc ON g.graphic_card_id = gc.graphic_card_id
        <where>
            <if test="category != null and category != ''">
                AND g.category = #{category}
            </if>
            <if test="pageObject.startRow != null and pageObject.endRow != null">
                AND ROWNUM BETWEEN #{pageObject.startRow} AND #{pageObject.endRow}
            </if>
        </where>
        ORDER BY g.total_price ASC
    </select>

    <!-- 최고가순으로 정렬 -->
    <select id="getGoodsListSortedByPriceDesc" resultType="org.zerock.goods.vo.GoodsVO">
        SELECT g.goods_no,
               g.cpu_id,
               g.memory_id,
               g.graphic_card_id,
               g.delivery_charge,
	           g.discount,
               g.total_price,
               g.category,
               g.hit,
               c.cpu_name,
               m.memory_name,
               gc.graphic_card_name,
               g.image_name
        FROM goods g
        JOIN cpu c ON g.cpu_id = c.cpu_id
        JOIN memory m ON g.memory_id = m.memory_id
        JOIN graphic_card gc ON g.graphic_card_id = gc.graphic_card_id
        <where>
            <if test="category != null and category != ''">
                AND g.category = #{category}
            </if>
            <if test="pageObject.startRow != null and pageObject.endRow != null">
                AND ROWNUM BETWEEN #{pageObject.startRow} AND #{pageObject.endRow}
            </if>
        </where>
        ORDER BY g.total_price DESC
    </select>


    <!-- 전체 상품 개수 조회 (페이징을 위한) -->
    <select id="getTotalCount" resultType="int">
        select COUNT(*) 
        from goods g
        join cpu c ON g.cpu_id = c.cpu_id
        join memory m ON g.memory_id = m.memory_id
        join graphic_card gc ON g.graphic_card_id = gc.graphic_card_id
    </select>

	
	
    <!-- 상품 상세 조회 -->
    <select id="view" resultType="org.zerock.goods.vo.GoodsVO">
        SELECT 
        g.goods_no,
        g.cpu_id,
        g.memory_id,
        g.graphic_card_id,
        g.cpu_name,
        g.memory_name,
        g.graphic_card_name,
        g.total_price,
        g.category,
        g.image_name,
        g.delivery_charge, 
        g.discount,
        g.hit,
        c.cpu_price,
        m.memory_price,
        gr.graphic_Card_price
    FROM goods g, cpu c, memory m, graphic_card gr
    WHERE g.goods_no = #{goods_no}
    	and g.cpu_id = c.cpu_id
    	and g.memory_id = m.memory_id
    	and g.graphic_card_id = gr.graphic_card_id
    </select>

	<select id="selectGoodsCategory" resultType="org.zerock.goods.vo.GoodsVO">
	    select
		    goods_no,
	        cpu_id,
	        memory_id,
	        graphic_card_id,
	        cpu_name,
	        memory_name,
	        graphic_card_name,
	        total_price,
	        category,
	        hit,
	        delivery_charge,
	        discount,
	        image_name,
	        image_files 
	    from goods
	    where category = #{category}  <!-- 카테고리로 상품 필터링 -->
	    order by goods_no desc
	</select>
	
	<!-- 조회수 증가 쿼리 -->
	<update id="increase">
		update goods set hit = hit + 1
		where goods_no = #{goods_no}
	</update>
	
	<select id="getcpu_id" resultType="org.zerock.goods.vo.Cpu">
	    SELECT cpu_id, cpu_name, cpu_price 
	    FROM cpu
	    where cpu_id != 999
	</select>
	
	<select id="getmemory_id" resultType="org.zerock.goods.vo.Memory">
	    SELECT memory_id, memory_name, memory_price 
	    FROM memory
	    where memory_id != 999
	</select>
	
	<select id="getgraphic_Card_id" resultType="org.zerock.goods.vo.Graphic_Card">
	    SELECT graphic_card_id, graphic_card_name, graphic_card_price 
	    FROM graphic_card
	     where graphic_card_id != 999
	</select>


    <!-- CPU 리스트 조회 -->
    <select id="getCpuList" resultType="org.zerock.goods.vo.Cpu">
	    select cpu_id, cpu_name, cpu_price
	    from cpu
	</select>

    <!-- Memory 리스트 조회 -->
    <select id="getMemoryList" resultType="org.zerock.goods.vo.Memory">
        select memory_id, memory_name, memory_price
        from memory
    </select>

    <!-- Graphic Card 리스트 조회 -->
    <select id="getGraphic_CardList" resultType="org.zerock.goods.vo.Graphic_Card">
        select graphic_card_id, graphic_card_name, graphic_card_price
        from graphic_card
    </select>
    
    <select id="getcpu_name" parameterType="int" resultType="String">
	    select cpu_name from cpu where cpu_id = #{cpu_id}
	</select>
	
	<select id="getmemory_name" parameterType="int" resultType="String">
	    select memory_name from memory where memory_id = #{memory_id}
	</select>
	
	<select id="getgraphic_Card_name" parameterType="int" resultType="String">
	    select graphic_Card_name from graphic_card where graphic_card_id = #{graphic_Card_id}
	</select>
	
	<!--  상품 이미지 리스트  -->
	<select id="image_name" resultType="org.zerock.goods.vo.GoodsImageVO"> 
		select goods_image_no, image_name, goods_no from goods_image where goods_no = #{goods_no} 
	</select>

    <!-- 삭제 -->
    <delete id="delete">
        delete from goods
        where goods_no = #{goods_no}
    </delete>


</mapper>